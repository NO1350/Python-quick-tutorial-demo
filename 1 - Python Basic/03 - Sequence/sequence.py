__author__ = 'crixalis'
# coding:utf-8
#!/usr/bin/env python
"""
sequence(序列)是一组有顺序的元素的集合

(严格的说，是对象的集合，但鉴于我们还没有引入“对象”概念，暂时说元素)

序列可以包含一个或多个元素，也可以没有任何元素。

我们之前所说的基本数据类型，都可以作为序列的元素。元素还可以是另一个序列，以及我们以后要介绍的其他对象。
"""

#序列有两种：tuple（定值表； 也有翻译为元组） 和 list (表)
s1=(2,1.3,'love',5.6,9,12,False)   #s1是一个tuple
s2=[True,5,'smile']                #s2是一个list
print s1,type(s1)
print s2,type(s2)

#tuple和list的主要区别在于，一旦建立，tuple的各个元素不可再变更，而list的各个元素可以再变更。

#一个序列作为另一个序列的元素
s3=[1,[3,4,5]]
#空序列
s4=[]
print s3
print s4

#元素的引用
#序列元素的下标从0开始：
print s1[0]
print s2[2]
print s3[1][2]
#由于list的元素可变更，你可以对list的某个元素赋值：
s2[1]=0
print s2
#tuple元素则不可变更

#范围引用： 基本样式[下限:上限:步长]
print s1[:5]             # 从开始到下标4 （下标5的元素 不包括在内）

print s1[2:]             # 从下标2到最后

print s1[0:5:2]          # 从下标0到下标4 (下标5不包括在内)，每隔2取一个元素 （下标为0，2，4的元素）

print s1[2:0:-1]         # 从下标2到下标1
#在范围引用的时候，如果写明上限，那么这个上限本身不包括在内

#尾部元素引用
print s1[-1]             # 序列最后一个元素

print s1[-3]             # 序列倒数第三个元素
#如果s1[0:-1], 那么最后一个元素不会被引用 （再一次，不包括上限元素本身）

#字符串是元组
str='abcdef'
print str[2:4]
#字符串是一种特殊的元素，因此可以执行元组的相关操作。

"""
个人理解，python中的变量名类似c中的指针，在python中变量名通过赋值运算指向对象，而不是变量名就是对象本身。
像’asdffgf‘ 和’wer‘是两个不同的对象，str只是由指向’asdffgf’改为指向‘wer’，本身‘asdffgf’这个tuple对象本身并没有被改变。
像tuple这种不可变数据类型n，是指对象整体不可变，但如果整体中存在部分元素a是可变数据类型，则可以修改它（不是指向新的对象），因为虽然修改a，但a还是对象a没有变化，整体来看n还是没有变化。
举例：>>>str = ‘abcdef’
>>>str[0]
'a'
可以看到str[0]指向字符串‘a’，是不可变数据类型，不能修改
像 >> str[0] = 'b' 引发错误是因为str[0]有对象'a' 指向了新的对象‘b’， 而str指向的对象‘abcd’是不可变的，因此错误
像： >>>zoo=('a',[1,2])
>>>zoo[1].append(3)
>>>zoo
('a',[1,2,3])
能够正确执行，是因为元组zoo对象整体没有变化，虽然修改了列表zoo[1]，但zoo[1]还是原先的列表对象zoo[1].假设运行：zoo[1]=[1,2,3] 肯定错误

总结起来就是一个整体与部分的关系，只要整体的各部分不变，则整体不变，至于部分内部如何变化就有可以分整体和部分分析了
"""
